#import "MyWebSocket.h"
#import "HTTPLogging.h"
#import "ProtoSDKNotification.h"
#import "pmobcli.h"
#import "WebSocketManager.h"
#import "JSONCategory.h"
#import "NSDictionary+Safe.h"
#import "EntCore.h"
#import "TransmitCore.h"

using namespace mobcli;

static NSString *HeartBeat = @"heartBeat";

@interface MyWebSocket ()
{
    dispatch_source_t _heartBeatRecvTimer;
    dispatch_queue_t _heartBeatRecvQueue;
    NSMutableArray *_appIds;
}
@end

@implementation MyWebSocket

- (void)dealloc {
    [YYLogger info:@"MyWebSocket" message:@"MyWebSocket dealloc"];
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void)onSvcData:(NSNotification*)notification
{
    SeriveTransmitData *data = [notification.userInfo objectForKey:kServiceDataNotificationUserInfoKey];
    
    NSData *d = data.data;
    if (d && d.length > 0) {
        uint32_t appId =  data.svcType;

        if (![_appIds containsObject:@(appId)]) {
            return;
        }
        
        NSMutableData *totalData = [NSMutableData dataWithCapacity:0];
        
        [totalData appendBytes: &appId length:sizeof(uint32_t)];
        
        [totalData appendData:d];
        
        [self sendData:totalData isBinary:YES];
    }
}

- (void)didOpen
{
	[super didOpen];
	
    [[NSNotificationCenter defaultCenter] removeObserver:self];

    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(onSvcData:) name:kServiceDataNotification object:nil];
    
    [self startHeartBeatRecvTimer];
}

- (void)didReceiveMessage:(NSString *)msg
{
    if (msg && msg.length > 0) {
        
        NSDictionary *dict = [msg yy_objectFromJSONString];
        if (dict) {
            NSString *messageType = [dict stringForKey:@"messageType"];
            id body = [dict objectForKey:@"body"];
            
            if (messageType && messageType.length > 0) {
                if ([messageType isEqualToString:@"heartBeat"]) {
                    [self startHeartBeatRecvTimer];
                } else if ([messageType isEqualToString:@"subscribeAppId"]) {
                    if (body && [body isKindOfClass:[NSArray class]]) {
                        NSArray *subscribeAppIds = (NSArray *)body;
                        
                        if (subscribeAppIds.count > 0) {
                            if (!_appIds) {
                                _appIds = [NSMutableArray arrayWithCapacity:0];
                            }
                            
                            [_appIds addObjectsFromArray:subscribeAppIds];
                            
                            [GetCore(TransmitCore) subscribeApp:subscribeAppIds];
                        }
                    }
                }
            }
        }
    }
}

- (void)didReceiveData:(NSData *)data {
    NSInteger headerLen = 4;

    if (data && data.length >= headerLen) {
        NSData *headerData = [data subdataWithRange:NSMakeRange(0, headerLen)];
        if (headerData && headerData.length > 0) {
        
            uint32_t appId;
            [headerData getBytes:&appId length:sizeof(uint32_t)];
            
            NSData *realData = [data subdataWithRange:NSMakeRange(headerLen, data.length - headerLen)];
            
            [GetCore(TransmitCore) sendData:realData toApp:appId];
        }
    }
}

- (void)didClose
{
	[super didClose];
    
    [self timerHandle];
}

#pragma mark - heartBeat

// 心跳回包计时器
- (void)startHeartBeatRecvTimer
{
    [self stopHeartBeatRecvTimer];
    
    __weak typeof(self) wself = self;
    if (!_heartBeatRecvQueue) {
        _heartBeatRecvQueue = dispatch_queue_create("com.yy.mobile.heatBeatRecv", DISPATCH_QUEUE_SERIAL);
    }
    
    _heartBeatRecvTimer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, _heartBeatRecvQueue);
    dispatch_source_set_timer(_heartBeatRecvTimer, dispatch_walltime(NULL, 8 * NSEC_PER_SEC), DISPATCH_TIME_FOREVER, (1ull * NSEC_PER_SEC) / 10);
    
    dispatch_source_set_event_handler(_heartBeatRecvTimer, ^{
        [wself timerHandle];
    });
    dispatch_resume(_heartBeatRecvTimer);
}

- (void)stopHeartBeatRecvTimer {

    if (_heartBeatRecvTimer) {
        dispatch_source_cancel(_heartBeatRecvTimer);
        _heartBeatRecvTimer = nil;
    }
}

// 超时未收到回包，关闭连接
- (void)timerHandle
{
    [self stopHeartBeatRecvTimer];
    
    [self stop];
}
@end
